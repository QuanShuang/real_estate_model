demo()
#install.packages(c("tidyverse", "plm","glmnet","gridExtra","tidyr"))
#install.packages(c("tidyverse", "plm","glmnet","gridExtra","tidyr"))
library(tidyverse)
install.packages(c("tidyverse", "plm","glmnet","gridExtra","tidyr"))
library(plm)
library(plm)
library(tidyverse)
library(plm)
library(glmnet)
library(gridExtra)
library(tidyr)
MLS <- read.csv("./data/mls.csv", stringsAsFactors = FALSE,strip.white = TRUE,sep = ',')
1+2
a <- 1
a
clear
die <- 1:6
die
ls()
die*die
roll <- function({
die <-1:6
dice <- sample(die, size = 2, replace=TRUE)
sum(dice)
})
roll <- function(){
die <-1:6
dice <- sample(die, size = 2, replace=TRUE)
sum(dice)
}
roll
roll()
roll()
roll()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
MLS <- read.csv("data/mls.csv", stringsAsFactors = FALSE,strip.white = TRUE,sep = ',')
MLS <- read.csv("./data/mls.csv", stringsAsFactors = FALSE,strip.white = TRUE,sep = ',')
MLS <- read.csv("./data/data4project.csv", stringsAsFactors = FALSE,strip.white = TRUE,sep = ',')
MLS <- read.csv("data/data4project.csv", stringsAsFactors = FALSE,strip.white = TRUE,sep = ',')
str(MLS)
source('D:/data/real_estate/real_estate_model/real_estate_R.R', echo=TRUE)
source('D:/data/real_estate/real_estate_model/real_estate_R.R', echo=TRUE)
install.packages(c("tidyverse", "plm", "glmnet", "gridExtra", "tidyr"))
library(tidyverse)  #collection of R packages for data science
library(plm)          #to run panel data regressions
library(glmnet)      #to run Lasso regressions (ML)
library(gridExtra)  #to put many graphs in one (subplots)
library(tidyr)      #get some extra tools like separate
# Set working environment to my git folder
setwd("D:/data/real_estate/real_estate_model")
MLS <- read.csv("data/data4project.csv", stringsAsFactors = FALSE,strip.white = TRUE,sep = ',')
str(MLS)
# Check my data
head(MLS)
summary(MLS) #Descriptive
table(MLS$type,MLS$bedrooms,exclude = NULL)  #Type of houses, bedrooms
table(MLS$type,MLS$fireplace,exclude=NULL)  #Type of houses, fireplaces
table(MLS$yearbuilt,exclude=NULL) #Built year
MLS$lnprice <- log(MLS$price_sold)
MLS$age <- MLS$year-MLS$yearbuilt
# Some plots
plot(MLS$bedrooms,MLS$lnprice, xlab="bedrooms",ylab="lnprice")
plot(MLS$baths,MLS$lnprice,xlab="baths",ylab="lnprice")
plot(MLS$days_on_market,MLS$lnprice,xlab="days_on_the_market",ylab="lnprice")
plot(MLS$age,MLS$lnprice, xlab="age",ylab="lnprice")
#count
counts <- table(MLS$lnprice)
barplot(counts, ylab="counts", xlab="log of price sold")
#first, cleaning up the type:
unique(MLS$type)
MLS$type <- ifelse(MLS$type=="Res"   | MLS$type=="Resid", "Residential", MLS$type)
MLS$type <- ifelse(MLS$type=="Multi" | MLS$type=="Mdw", "Multidweling", MLS$type)
MLS$type <- ifelse(MLS$type=="Condo", "Built As Condomimum", MLS$type)
MLS$type <- ifelse(MLS$type=="", "Other", MLS$type)
unique(MLS$type)
attach(MLS)
unique(MLS$pool)
MLS$pooldummy <- ifelse(pool!="None_"
& pool!="NONE_"
& pool!="No Swimming Pool"
& pool!="No Swimming Poo"
& pool!="None"
& pool!="Pool-No Swimming Poo"
& pool!="Above Ground,None"
& pool!="Ingrn,None_"
& pool!="INGRN,NONE_"
& pool!="ABOVE,NONE_"
& pool!="INGRN,NONE_"
, 1, NA)
MLS$pooldummy <- ifelse(is.na(MLS$pooldummy)
, 0, ifelse(pool=="","",MLS$pooldummy))
table(pool,MLS$pooldummy,exclude=NULL)
detach(MLS)
MLS$basement<-toupper(MLS$basement)
MLS$basementdummy<-ifelse(grepl("FINSH",MLS$basement)
,"Yes",ifelse(MLS$basement=="","","No"))
table(MLS$basementdummy)
#now let us check the heater type
MLS$heattype<-toupper(MLS$heattype)
unique(MLS$heattype)
MLS$centralheat<-ifelse(grepl("CNTRL",MLS$heat)
,"Yes",ifelse(MLS$heattype=="","","No"))
table(MLS$centralheat)
cat("Unique MLS Styles \n")
unique(MLS$style)
MLStest <- MLS %>% separate(style, c("style"),extra='drop')
cat("\n New Unique MLS styles \n")
unique(MLStest$style)
attach(MLS)
MLS$style <- ifelse(style=="Tradt", "Traditional", style)
MLS$style <- ifelse(style=="Europ", "European", style)
MLS$style <- ifelse(style=="Colon", "Colonial", style)
MLS$style <- ifelse(style=="Cntmp", "Contemporary", style)
MLS$style <- ifelse(style=="Cntry", "Country", style)
MLS$style <- ifelse(style!="Traditional" & style!="European"
& style!="Colonial" & style!="Conte mporary"
& style!="Country" & style!="Ranch", "Other"
, style)
detach(MLS)
unique(MLS$style)
MLS$school_dist <-ifelse(is.na(MLS$school_dist),100000
,MLS$school_dist)
MLS<-MLS[(is.na(MLS$bedrooms)==FALSE
& is.na(MLS$fireplace)==FALSE
& is.na(MLS$baths)==FALSE),]
MLS<-MLS[MLS$type!="Deeded"
& MLS$type!="Conversion"
& MLS$type!="Quadraplex"
& MLS$type!="Duple x",]
MLS<-MLS[MLS$yearbuilt<2009,]
MLS<-MLS[is.na(MLS$zipcode)==FALSE,]
MLS<-MLS[MLS$pooldummy!=""
& MLS$basementdummy!=""& MLS$centralheat!="",]
MLS$pooldummy <- factor(MLS$pooldummy)
MLS$basementdummy <- factor(MLS$basementdummy)
MLS$centralheat <- factor(MLS$centralheat)
MLS$type <- factor(MLS$type)
MLS$style <- factor(MLS$style)
MLS$school_dist <- factor(MLS$school_dist)
MLS$year<- factor(MLS$year)
MLS$zipcode <- factor(MLS$zipcode)
MLS$yearbuilt<-NULL
MLS$pool <- NULL
MLS$sqft <- NULL
MLS$heattype <- NULL
MLS$basement <- NULL
MLS$city <- NULL
MLS$elemsch <- NULL
sm<-summary(lm(lnprice ~
bedrooms + age + baths + style + type
+ basementdummy  + pooldummy
, data = MLS))
sm
mean(sm$residuals^2)
mean(sm$residuals^2)
sm<-summary(lm(lnprice ~
bedrooms + age + baths + style + type
+ basementdummy  + pooldummy + school_dist
+ year + zipcode , data = MLS))
sm
mean(sm$residuals^2)
mean(sm$residuals^2)
mean(sm$residuals^2)mean(sm$residuals^2)
mean(sm$residuals^2)
grid = 10^seq(10, -2, length = 100)
+ year, MLS)[,-1] # only select the dependent variable
+ year, MLS)[,-1] # only select the dependent variable
x = model.matrix(lnprice~ bedrooms + age + baths
+ style + type  + basementdummy  + pooldummy
+ school_dist + school_dist + zipcode
+ year, MLS)[,-1] # only select the dependent variable
x = model.matrix(lnprice ~ bedrooms + age + baths
+ style + type  + basementdummy  + pooldummy
+ school_dist + school_dist + zipcode
+ year, MLS)[,-1] # only select the dependent variable
+ year, MLS)[,-1] # only select the dependent variable
x = model.matrix(lnprice ~ bedrooms + age + baths
+ style + type  + basementdummy  + pooldummy
+ school_dist + school_dist + zipcode
+ year, MLS)[,-1] # only select the dependent variable
x = model.matrix(lnprice ~ bedrooms + age + baths
+ style + type  + basementdummy  + pooldummy
+ school_dist + school_dist + zipcode
+ year, MLS)[,-1] # only select the dependent variable
x = model.matrix(lnprice ~ bedrooms + age + baths
+ style + type  + basementdummy  + pooldummy
+ school_dist + school_dist + zipcode
+ year, MLS)[,-1] # only select the dependent variable
y = MLS %>% select(lnprice) %>% unlist() %>% as.numeric()
y = MLS %>% select(lnprice) %>% unlist() %>% as.numeric()
set.seed(1)
train = MLS %>% sample_frac(0.5)
test = MLS %>% setdiff(train)
+ school_dist + zipcode + year, train)[,-1]
x_train = model.matrix(lnprice~ bedrooms + age + baths + style
+ type  + basementdummy  + pooldummy
+ school_dist + zipcode + year, train)[,-1]
x_test = model.matrix(lnprice~bedrooms + age + baths + style + type
+ basementdummy  + pooldummy + school_dist
+ zipcode + year, test)[,-1]
y_train = train %>% select(lnprice) %>% unlist() %>% as.numeric()
y_test = test %>% select(lnprice) %>%  unlist() %>% as.numeric()
lasso_mod = glmnet(x_train, y_train, alpha = 1
,lambda = grid)  # Fit lasso model on training data
dim(coef(lasso_mod)) #Dimensions of the coefficients matrix
plot(lasso_mod)    # Draw plot of coefficients
set.seed(1)
cv.out = cv.glmnet(x_train, y_train, alpha = 1)
set.seed(1)
cv.out = cv.glmnet(x_train, y_train, alpha = 1)
plot(cv.out) # Draw plot of training MSE as a function of lambda
bestlam = cv.out$lambda.min # Select lamda that minimizes training MSE
lasso_pred = predict(lasso_mod, s = bestlam, newx = x_test)
mean((lasso_pred - y_test)^2) # Calculate test MSE
out = glmnet(x, y, alpha = 1, lambda = grid)
# Fit lasso model on full dataset
lasso_coef = predict(out, type = "coefficients", s = bestlam)[1:113,]
# Fit lasso model on full dataset
lasso_coef = predict(out, type = "coefficients", s = bestlam)[1:112,]
# Display coefficients using lambda chosen by CV
lasso_coef
lasso_coef
lasso_coef[lasso_coef != 0] # Display only non-zero coefficients
